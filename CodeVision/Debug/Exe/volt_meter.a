;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/24/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <stdio.h>
;#include <delay.h>
;#include <alcd.h>   // Alphanumeric LCD functions
;
;#define ADCChannel 0	//Read voltage from PORTA0(ADC0)
;
;void ADCInit(){
; 0000 0020 void ADCInit(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 	ADCSRA = 0xe0;				//Enable ADC, Prescaler : 2 ,Free running mode
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0022 	ADMUX = 0x40 | ADCChannel;	//Select ADC channel
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0023 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;int readADC(){
; 0000 0025 int readADC(){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0026 	int ADC_value = ADCL;	//Read 8 lower bit.
; 0000 0027 	ADC_value += (ADCH & 0x03)<<8;	//Read 2 upper bit and add it to ADC_value.
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	ADC_value -> R16,R17
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0028 	return ADC_value;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0029 }
;PCODE: $00000024 VOL: 0
;
;float readVoltage(){
; 0000 002B float readVoltage(){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002C 	int ADC_value = readADC();
; 0000 002D 	float voltage_value = ADC_value/201.37; //ADC_value is between 0 and 1023.voltage_value is between 0 and 5;
; 0000 002E 	return voltage_value;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	ADC_value -> R16,R17
;	voltage_value -> Y+2
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002F }
;PCODE: $00000039 VOL: 0
;
;void main(void)
; 0000 0032 {
;PCODE: $0000003A VOL: 0
; 0000 0033     // Alphanumeric LCD initialization
; 0000 0034     // Connections are specified in the
; 0000 0035     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0036     // RS - PORTD Bit 0
; 0000 0037     // RD - PORTD Bit 1
; 0000 0038     // EN - PORTD Bit 2
; 0000 0039     // D4 - PORTD Bit 4
; 0000 003A     // D5 - PORTD Bit 5
; 0000 003B     // D6 - PORTD Bit 6
; 0000 003C     // D7 - PORTD Bit 7
; 0000 003D     float voltage_value;
; 0000 003E     char voltage_string[10];
; 0000 003F     char lcd_string[16];
; 0000 0040     lcd_init(16);
;PCODE: $0000003B VOL: 0
;	voltage_value -> Y+26
;	voltage_string -> Y+16
;	lcd_string -> Y+0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0041     ADCInit();
;PCODE: $0000003E VOL: 0
; 0000 0042     lcd_gotoxy(0,1);    //Move cursor to second line and first column.
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0043     lcd_puts("  DC Voltmeter"); //Write "  DC Voltmeter" on lcd.
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0044     while (1)
;PCODE: $00000046 VOL: 0
; 0000 0045           {
; 0000 0046           lcd_gotoxy(0,0);  //Move cursor to first line and first column.
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0047           voltage_value = readVoltage()*9.1818;    //Use 33Kohm and 270Kohm to divide voltage.( 9.1818 = (270+33)/33 ).
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0048           ftoa(voltage_value,2,voltage_string);    //convert float to char array.
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0049           sprintf(lcd_string,"Voltage : %s",voltage_string);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004A           lcd_puts(lcd_string);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 004B           delay_ms(500);    ////Refresh lcd every 100 ms.
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 004C           }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004D }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0

	.DSEG
_0x3:
	.BYTE 0xF
